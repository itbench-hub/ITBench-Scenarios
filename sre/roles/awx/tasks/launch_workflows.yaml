---
- name: Create workflow launch list
  ansible.builtin.set_fact:
    awx_experiment_workflows: |
      {{
        awx_experiments.scenarios |
        product(range(1, ((awx_experiments.trials | int) + 1)))
      }}
  tags:
    - launch_experiment_workflow
    - deinit_experiment_workflow

- name: Import variable setting tasks
  ansible.builtin.import_tasks:
    file: set_awx_controller_host.yaml
  tags:
    - launch_experiment_workflow
    - deinit_experiment_workflow

- name: Import variable setting tasks
  ansible.builtin.import_tasks:
    file: set_awx_controller_password.yaml
  tags:
    - launch_experiment_workflow
    - deinit_experiment_workflow

- name: Generate UUID4 for run_uuid
  ansible.builtin.command:
    cmd: uuidgen -r
  changed_when: false
  register: awx_generated_uuid
  tags:
    - launch_experiment_workflow

- name: Launch the workflow for initializing the run of select or all scenarios end-to-end
  awx.awx.workflow_launch:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    workflow_template: "Scenario-{{ item[0] }}-Init"
    extra_vars:
      storage:
        s3:
          bucket: "{{ storage.s3.bucket | default('') }}"
          endpoint: "{{ storage.s3.endpoint | default('') }}"
          directory: "{{ awx_agent.version }}/{{ awx_generated_uuid.stdout }}/{{ item[0] | string }}/{{ item[1] | string }}"
    wait: false
  loop: "{{ awx_experiment_workflows }}"
  register: awx_launched_init_workflows
  tags:
    - launch_experiment_workflow

- name: Wait for all launched init workflows to complete
  ansible.builtin.uri:
    url: "{{ awx_controller_host }}/api/v2/workflow_jobs/{{ item.id }}/"
    method: GET
    user: admin
    password: "{{ awx_controller_password }}"
    force_basic_auth: true
    return_content: true
    validate_certs: false
    timeout: 30
  loop: "{{ awx_launched_init_workflows.results }}"
  when: item.id is defined
  register: awx_status_init_workflows
  until: awx_status_init_workflows.json.status in ['successful', 'failed', 'error', 'canceled']
  retries: 20
  delay: 30
  tags:
    - launch_experiment_workflow

- name: Check that all init workflows are succesful
  ansible.builtin.fail:
    msg: "Init workflow {{ item.json.name }} (ID: {{ item.json.id }}) failed with status: {{ item.json.status }}"
  loop: "{{ awx_status_init_workflows.results }}"
  when:
    - item.json.status is defined
    - item.json.status != 'successful'
  tags:
    - launch_experiment_workflow

- name: Launch the workflow for running select or all scenarios - the end-to-end experiment
  awx.awx.workflow_launch:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    workflow_template: "Scenario-{{ item[0] }}"
    extra_vars:
      storage:
        s3:
          bucket: "{{ storage.s3.bucket | default('') }}"
          endpoint: "{{ storage.s3.endpoint | default('') }}"
          directory: "{{ awx_agent.version }}/{{ awx_generated_uuid.stdout }}/{{ item[0] | string }}/{{ item[1] | string }}"
    wait: false
  loop: "{{ awx_experiment_workflows }}"
  tags:
    - launch_experiment_workflow

- name: Launch the workflow for de-initializing the run of select or all scenarios end-to-end
  awx.awx.workflow_launch:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    workflow_template: "Scenario-{{ item[0] }}-Deinit"
    extra_vars:
      storage:
        s3:
          bucket: ""
          endpoint: ""
          directory: ""
    wait: false
  loop: "{{ awx_experiment_workflows }}"
  register: awx_launched_deinit_workflows
  tags:
    - deinit_experiment_workflow

- name: Wait for all launched deinit workflows to complete
  ansible.builtin.uri:
    url: "{{ awx_controller_host }}/api/v2/workflow_jobs/{{ item.id }}/"
    method: GET
    user: admin
    password: "{{ awx_controller_password }}"
    force_basic_auth: true
    return_content: true
    validate_certs: false
    timeout: 30
  loop: "{{ awx_launched_deinit_workflows.results }}"
  when: item.id is defined
  register: awx_status_deinit_workflows
  until: awx_status_deinit_workflows.json.status in ['successful', 'failed', 'error', 'canceled']
  retries: 20
  delay: 30
  tags:
    - deinit_experiment_workflow

- name: Check that all deinit workflows are successful
  ansible.builtin.fail:
    msg: "Deinit workflow {{ item.json.name }} (ID: {{ item.json.id }}) failed with status: {{ item.json.status }}"
  loop: "{{ awx_status_deinit_workflows.results }}"
  when:
    - item.json.status is defined
    - item.json.status != 'successful'
  tags:
    - deinit_experiment_workflow
