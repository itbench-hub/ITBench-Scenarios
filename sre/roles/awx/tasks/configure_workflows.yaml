---
- name: Import variable setting tasks
  ansible.builtin.import_tasks:
    file: set_awx_controller_host.yaml

- name: Import variable setting tasks
  ansible.builtin.import_tasks:
    file: set_awx_controller_password.yaml

- name: Create workflow for starting incidents
  awx.awx.workflow_job_template:
    ask_variables_on_launch: true
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    name: "Start-Scenario-{{ incident }}"
    state: present
    workflow_nodes:
      - identifier: node-install-observability-stack
        unified_job_template:
          name: "Scenario-{{ incident }}--Deploy-Tools"
          type: job_template
        related:
          success_nodes:
            - identifier: node-install-sample-application
          always_nodes: []
      - identifier: node-install-sample-application
        unified_job_template:
          name: "Scenario-{{ incident }}--Deploy-Applications"
          type: job_template
        related:
          success_nodes:
            - identifier: node-inject-fault
          always_nodes: []
      # ToDo: Replace with *NEW* implementation
      # - identifier: node-telemetry-access
      #   unified_job_template:
      #     name: "Scenario-{{ incident }}--Setup-For-Telemetry-Access"
      #     type: job_template
      #   related:
      #     success_nodes:
      #       - identifier: node-trace-gathering
      #     failure_nodes:
      #       - identifier: node-capture-failed-deployment
      - identifier: node-install-recorders
        unified_job_template:
          name: "Scenario-{{ incident }}--Install-Data-Recorders"
          type: job_template
        related:
          success_nodes:
            - identifier: node-handover-to-agent
          failure_nodes:
            - identifier: node-inject-fault
          always_nodes: []
      - identifier: node-inject-fault
        unified_job_template:
          name: "Scenario-{{ incident }}--Inject-Faults"
          type: job_template
        related:
          success_nodes:
            - identifier: node-check-for-alerts
          always_nodes: []
      # # TODO: Replace with a topology recorder run
      # - identifier: node-post-fault-injection
      #   unified_job_template:
      #     name: "Scenario-{{ incident }}--Post-Fault-Injection"
      #     type: job_template
      #   related:
      #     success_nodes:
      #       - identifier: node-check-for-alerts
      #     failure_nodes:
      #       - identifier: node-capture-failed-deployment
      #     always_nodes: []
      - identifier: node-check-for-alerts
        unified_job_template:
          name: "Scenario-{{ incident }}--Check-for-Alerts"
          type: job_template
        related:
          success_nodes: [] # - identifier: node-handover-to-agent
          always_nodes: []
      # # TODO: Need equivalent of handover-to-agent-record
      # - identifier: node-handover-to-agent
      #   unified_job_template:
      #     name: "Scenario-{{ incident }}--Handover-To-Agent"
      #     type: job_template
      #   related:
      #     success_nodes: []
      #     always_nodes: []

- name: Create workflow for stopping incidents
  awx.awx.workflow_job_template:
    ask_variables_on_launch: true
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    name: "Stop-Scenario-{{ incident }}"
    state: present
    workflow_nodes:
      - identifier: node-uninstall-recorders
        unified_job_template:
          name: "Scenario-{{ incident }}--Uninstall-Data-Recorders"
          type: job_template
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes:
            - identifier: node-remove-fault
      - identifier: node-remove-fault
        unified_job_template:
          name: "Scenario-{{ incident }}--Remove-Faults"
          type: job_template
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes:
            - identifier: node-undeploy-applications
      # ToDo: To be removed in lieu on new implementation with stringent Kubeconfig
      # - identifier: node-uninstalling-k8s-resources-default-namespace
      #   unified_job_template:
      #     name: "Scenario-{{ incident }}--Uninstalling-K8s-Resources-Default-Namespace"
      #     type: job_template
      #   related:
      #     success_nodes: []
      #     failure_nodes: []
      #     always_nodes:
      #       - identifier: node-alert-recorder-off
      # - identifier: node-alert-recorder-off
      #   unified_job_template:
      #     name: "Scenario-{{ incident }}--Alert-Recorder-Off"
      #     type: job_template
      #   related:
      #     success_nodes: []
      #     failure_nodes: []
      #     always_nodes:
      #       - identifier: node-uninstall-sample-application-end
      - identifier: node-undeploy-applications
        unified_job_template:
          name: "Scenario-{{ incident }}--Undeploy-Applications"
          type: job_template
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes:
            - identifier: node-undeploy-tools
      - identifier: node-undeploy-tools
        unified_job_template:
          name: "Scenario-{{ incident }}--Undeploy-Tools"
          type: job_template
        related:
          success_nodes: []
          failure_nodes: []
          always_nodes: []
