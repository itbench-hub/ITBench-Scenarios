---
- name: Import variable setting tasks
  ansible.builtin.import_tasks:
    file: set_awx_controller_host.yaml

- name: Import variable setting tasks
  ansible.builtin.import_tasks:
    file: set_awx_controller_password.yaml

- name: Create kubeconfig credential type
  awx.awx.credential_type:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    description: Credentials type for Kubeconfig
    inputs:
      fields:
        - id: kubeconfig
          type: string
          label: kubeconfig
          secret: true
          multiline: true
      required:
        - kubeconfig
    injectors:
      file:
        template.kubeconfig: "\\{\\{ kubeconfig \\}\\}"
      extra_vars:
        kubeconfig: "\\{\\{ tower.filename.kubeconfig \\}\\}"
    kind: cloud
    name: Kubeconfig
    state: present

- name: Create IT-Bench organization
  awx.awx.organization:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    description: Organization for IT-Bench
    name: IT-Bench
    state: present

- name: Create kubeconfig credentials for each runner
  awx.awx.credential:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    credential_type: Kubeconfig
    description: Kubeconfig file for a Kubernetes cluster
    inputs:
      kubeconfig: "{{ lookup('ansible.builtin.file', item) }}"
    name: Cluster-{{ runner_index + 1 }}-Kubeconfig
    organization: IT-Bench
  loop: "{{ awx_runners.kubeconfigs }}"
  loop_control:
    index_var: runner_index

- name: Create credentials for ITBench Repository
  awx.awx.credential:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    credential_type: Source Control
    description: SSH Credentials for ITBench GitHub repository
    inputs:
      ssh_key_data: "{{ lookup('ansible.builtin.file', awx_github.it_bench.ssh.private_key_path) }}"
      ssh_key_unlock: "{{ awx_github.it_bench.ssh.private_key_passphrase }}"
    name: GitHub-IT-Bench
    organization: IT-Bench
    state: present
  when:
    - awx_github.it_bench.ssh is defined
    - awx_github.it_bench.ssh.private_key_path is file

- name: Create credentials for LLM Agent
  awx.awx.credential:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    credential_type: Source Control
    description: SSH Credentials for LLM agent repository
    inputs:
      ssh_key_data: "{{ lookup('ansible.builtin.file', awx_github.llm_agent.ssh.private_key_path) }}"
      ssh_key_unlock: "{{ awx_github.llm_agent.ssh.private_key_passphrase }}"
    name: GitHub-LLM-Agent
    organization: IT-Bench
    state: present
  when:
    - awx_github.llm_agent.ssh is defined
    - awx_github.llm_agent.ssh.private_key_path is file

- name: Create credentials for AWS
  awx.awx.credential:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    credential_type: Amazon Web Services
    description: Credentials for AWS
    inputs:
      username: "{{ awx_credentials.aws.access_key_id }}"
      password: "{{ awx_credentials.aws.secret_access_key }}" # pragma: allowlist secret
    name: AWS
    organization: IT-Bench
    state: present
  when:
    - awx_credentials.aws is defined

# TODO: Remove this credential once the cronjobs are refactored

- name: Add/Remove AWX credentials
  awx.awx.credential:
    # (Hack): As the value set using set_fact controller_host is not picked up
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    name: Credential-AWX
    description: Credential-AWX
    organization: IT-Bench
    credential_type: Red Hat Ansible Automation Platform
    inputs:
      host: "{{ awx_controller_host }}"
      username: admin
      password: "{{ awx_controller_password }}" # pragma: allowlist secret

- name: Create project for ITBench Repository
  awx.awx.project:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    credential: "{{ 'GitHub-IT-Bench' if awx_github.it_bench.ssh is defined else omit }}"
    description: ITBench GitHub repository
    name: GitHub-ITBench
    organization: IT-Bench
    scm_allow_override: true
    scm_branch: v1-refactor
    scm_clean: true
    scm_delete_on_update: true
    scm_track_submodules: false
    scm_type: git
    scm_url: "{{ awx_github.it_bench.url }}"
    state: present

- name: Create project for LLM Agent Repository
  awx.awx.project:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    credential: "{{ 'GitHub-LLM-Agent' if awx_github.llm_agent.ssh is defined else omit }}"
    description: LLM Agent GitHub repository
    name: GitHub-LLM-Agent
    organization: IT-Bench
    scm_allow_override: true
    scm_branch: main
    scm_clean: true
    scm_delete_on_update: true
    scm_track_submodules: false
    scm_type: git
    scm_url: "{{ awx_github.llm_agent.url }}"
    state: present

- name: Create ITBench-Scenarios inventory
  awx.awx.inventory:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    description: Inventory for IT-Bench SRE Scenarios
    name: ITBench-Scenarios
    organization: IT-Bench
    state: present

- name: Create SRE inventory source
  awx.awx.inventory_source:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    description: Inventory for IT-Bench SRE Scenarios
    inventory: ITBench-Scenarios
    name: SRE
    organization: IT-Bench
    source: scm
    source_path: sre/inventory.yaml
    source_project: GitHub-ITBench
    state: present

- name: Create execution environment
  awx.awx.execution_environment:
    controller_host: "{{ awx_controller_host }}"
    controller_password: "{{ awx_controller_password }}" # pragma: allowlist secret
    controller_username: admin
    description: Custom environment for running ITBench scenarios
    image: quay.io/arorar/awx-ee
    name: AWX-EE-Custom
    organization: IT-Bench
    pull: always

- name: Include AWX job configuration tasks
  ansible.builtin.include_tasks:
    file: configure_jobs.yaml
    apply:
      tags:
        - install_tools
  loop: "{{ awx_experiments.incidents }}"
  loop_control:
    loop_var: incident
    index_var: incident_index

- name: Import AWX workflow configuration tasks
  ansible.builtin.include_tasks:
    file: configure_workflows.yaml
    apply:
      tags:
        - install_tools
  loop: "{{ awx_experiments.incidents }}"
  loop_control:
    loop_var: incident
