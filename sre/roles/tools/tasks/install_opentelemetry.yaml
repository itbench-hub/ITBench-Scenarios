---
- name: Create the release namespace for OpenTelemetry Operator
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ tools_helm_releases.opentelemetry_operator.namespace }}"
        annotations:
          openshift.io/sa.scc.mcs: s0:c29,c9
          openshift.io/sa.scc.supplemental-groups: 65532/10000
          openshift.io/sa.scc.uid-range: 65000/10000
        labels:
          it-bench/monitoring: "true"
    state: present
  when:
    - tools_cluster.platform == "kubernetes"

- name: Install OpenTelemetry Operator
  kubernetes.core.helm:
    chart_ref: opentelemetry-operator
    chart_repo_url: https://open-telemetry.github.io/opentelemetry-helm-charts
    chart_version: 0.98.0
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    release_name: "{{ tools_helm_releases.opentelemetry_operator.name }}"
    release_namespace: "{{ tools_helm_releases.opentelemetry_operator.namespace }}"
    release_state: present
    timeout: 10m0s
    values:
      manager:
        serviceMonitor:
          enabled: "{{ tools_required.prometheus }}"
      admissionWebhooks:
        certManager:
          enabled: false
        autoGenerateCert:
          enabled: true
    wait: true
  when:
    - tools_cluster.platform == "kubernetes"

- name: Create the project for RH build of OpenTelemetry Operator
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: project.openshift.io/v1
      kind: Project
      metadata:
        name: openshift-opentelemetry-operator
        labels:
          kubernetes.io/metadata.name: openshift-opentelemetry-operator
          openshift.io/cluster-monitoring: "true"
    state: present
  when:
    - tools_cluster.platform == "openshift"

- name: Create the operator group for RH build of OpenTelemetry Operator
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: openshift-opentelemetry-operator
        namespace: openshift-opentelemetry-operator
      spec:
        upgradeStrategy: Default
    state: present
  when:
    - tools_cluster.platform == "openshift"

- name: Create the subscription for RH build of OpenTelemetry Operator
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: opentelemetry-product
        namespace: openshift-opentelemetry-operator
      spec:
        channel: stable
        installPlanApproval: Automatic
        name: opentelemetry-product
        source: redhat-operators
        sourceNamespace: openshift-marketplace
    state: present
  when:
    - tools_cluster.platform == "openshift"

- name: Wait for RH build of OpenTelemetry Operator
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    namespace: openshift-opentelemetry-operator
    wait: true
  register: tools_csv_info
  until:
    - tools_csv_info.resources | community.general.json_query('[*].status.phase') | difference(['Succeeded']) | length == 0
  retries: 10
  delay: 30
  when:
    - tools_cluster.platform == "openshift"

- name: Wait for OpenTelemetry CRD to be installed
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    name: opentelemetrycollectors.opentelemetry.io
    wait: true
  when:
    - tools_cluster.platform == "openshift"

- name: Create the release namespace for OpenTelemetry Collectors
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ tools_instances.opentelemetry_collectors.namespace }}"
        labels:
          it-bench/monitoring: "true"
    state: present

- name: Import variable setting task
  ansible.builtin.import_tasks:
    file: set_clickhouse_credentials.yaml
  when:
    - tools_required.opentelemetry

- name: Import variable setting task
  ansible.builtin.import_tasks:
    file: set_clickhouse_endpoint.yaml
  when:
    - tools_required.opentelemetry

- name: Install Kubernetes object collector
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    template: templates/opentelemetry/collectors/kubernetes-objects.j2
    state: present
  vars:
    container_image: |
      {{
        lookup('ansible.builtin.file', 'files/opentelemetry/collectors/kubernetes-objects.yaml') |
        from_yaml |
        community.general.json_query('spec.image')
      }}
  when:
    - tools_required.opentelemetry

- name: Wait for Kubernetes object collector deployment to complete
  kubernetes.core.k8s_info:
    api_version: opentelemetry.io/v1beta1
    kind: OpenTelemetryCollector
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    name: "{{ tools_instances.opentelemetry_collectors.names.kubernetes_events }}"
    namespace: "{{ tools_instances.opentelemetry_collectors.namespace }}"
    wait: true
  register: tools_kubernetes_objects_collector_info
  until:
    - tools_kubernetes_objects_collector_info.resources[0].status.scale is defined
    - tools_kubernetes_objects_collector_info.resources[0].status.scale.statusReplicas | split('/') | unique | length == 1
  retries: 10
  delay: 30
  when:
    - tools_required.opentelemetry

- name: Install Jaeger
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    template: templates/opentelemetry/collectors/jaeger.j2
    state: present
  vars:
    container_image: |
      {{
        lookup('ansible.builtin.file', 'files/opentelemetry/collectors/jaeger.yaml') |
        from_yaml |
        community.general.json_query('spec.image')
      }}
  when:
    - tools_required.jaeger

- name: Wait for Jaeger collector to complete
  kubernetes.core.k8s_info:
    api_version: opentelemetry.io/v1beta1
    kind: OpenTelemetryCollector
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    name: "{{ tools_instances.opentelemetry_collectors.names.jaeger }}"
    namespace: "{{ tools_instances.opentelemetry_collectors.namespace }}"
    wait: true
  register: tools_jaeger_collector_info
  until:
    - tools_jaeger_collector_info.resources[0].status.scale is defined
    - tools_jaeger_collector_info.resources[0].status.scale.statusReplicas | split('/') | unique | length == 1
  retries: 10
  delay: 30
  when:
    - tools_required.jaeger
