---
- name: Create the release namespace for OpenTelemetry Operator
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ helm_releases.operator.namespace }}"
        annotations:
          openshift.io/sa.scc.mcs: s0:c29,c9
          openshift.io/sa.scc.supplemental-groups: 65532/10000
          openshift.io/sa.scc.uid-range: 65000/10000
        labels:
          it-bench/monitoring: "true"
    state: present
  when:
    - tools_cluster.platform == "kubernetes"

- name: Install OpenTelemetry Operator
  kubernetes.core.helm:
    chart_ref: opentelemetry-operator
    chart_repo_url: https://open-telemetry.github.io/opentelemetry-helm-charts
    chart_version: 0.98.0
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    release_name: "{{ helm_releases.operator.name }}"
    release_namespace: "{{ helm_releases.operator.namespace }}"
    release_state: present
    timeout: 10m0s
    values:
      manager:
        serviceMonitor:
          enabled: "{{ tools_required.prometheus }}"
      admissionWebhooks:
        certManager:
          enabled: false
        autoGenerateCert:
          enabled: true
    wait: true
  when:
    - tools_cluster.platform == "kubernetes"

- name: Create the project for RH build of OpenTelemetry Operator
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: project.openshift.io/v1
      kind: Project
      metadata:
        name: openshift-opentelemetry-operator
        labels:
          kubernetes.io/metadata.name: openshift-opentelemetry-operator
          openshift.io/cluster-monitoring: "true"
    state: present
  when:
    - tools_cluster.platform == "openshift"

- name: Create the operator group for RH build of OpenTelemetry Operator
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: openshift-opentelemetry-operator
        namespace: openshift-opentelemetry-operator
      spec:
        upgradeStrategy: Default
    state: present
  when:
    - tools_cluster.platform == "openshift"

- name: Create the subscription for RH build of OpenTelemetry Operator
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: opentelemetry-product
        namespace: openshift-opentelemetry-operator
      spec:
        channel: stable
        installPlanApproval: Automatic
        name: opentelemetry-product
        source: redhat-operators
        sourceNamespace: openshift-marketplace
    state: present
  when:
    - tools_cluster.platform == "openshift"

- name: Wait for RH build of OpenTelemetry Operator
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    namespace: openshift-opentelemetry-operator
    wait: true
  register: tools_csv_info
  until:
    - tools_csv_info.resources | community.general.json_query('[*].status.phase') | difference(['Succeeded']) | length == 0
  retries: 10
  delay: 30
  when:
    - tools_cluster.platform == "openshift"

- name: Wait for OpenTelemetry CRD to be installed
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    name: opentelemetrycollectors.opentelemetry.io
    wait: true
  when:
    - tools_cluster.platform == "openshift"

- name: Create the release namespace for OpenTelemetry Collectors
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ helm_releases.collectors.namespace }}"
        labels:
          it-bench/monitoring: "true"
    state: present

- name: Import variable setting task
  ansible.builtin.import_tasks:
    file: set_clickhouse_credentials.yaml
  when:
    - tools_required.opentelemetry

- name: Import variable setting task
  ansible.builtin.import_tasks:
    file: set_clickhouse_endpoint.yaml
  when:
    - tools_required.opentelemetry

- name: Install OpenTelemetry Collector for Kubernetes Events
  kubernetes.core.helm:
    chart_ref: opentelemetry-collector
    chart_repo_url: https://open-telemetry.github.io/opentelemetry-helm-charts
    chart_version: 0.134.0
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    release_name: "{{ helm_releases.collectors.names.kubernetes_events }}"
    release_namespace: "{{ helm_releases.collectors.namespace }}"
    release_state: present
    timeout: 10m0s
    values:
      mode: deployment
      replicaCount: 1
      presets:
        kubernetesEvents:
          enabled: true
      image:
        repository: quay.io/it-bench/opentelemetry-collector
        tag: 1.0.0
      podAnnotations:
        openshift.io/required-scc: restricted-v2
      ports:
        jaeger-compact:
          enabled: false
        jaeger-thrift:
          enabled: false
        jaeger-grpc:
          enabled: false
        zipkin:
          enabled: false
        metrics:
          enabled: "{{ tools_required.prometheus }}"
      serviceMonitor:
        enabled: "{{ tools_required.prometheus }}"
      config:
        exporters:
          clickhouse:
            username: "{{ tools_clickhouse_username }}"
            password: "{{ tools_clickhouse_password }}"
            endpoint: "{{ tools_clickhouse_endpoint }}"
            logs_table_name: kubernetes_events
        service:
          pipelines:
            logs:
              exporters:
                - debug
                - clickhouse
    wait: true
  when:
    - tools_required.opentelemetry

- name: Install Jaeger
  kubernetes.core.k8s:
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    name: "{{ instances.jaeger.name }}"
    namespace: "{{ helm_releases.collectors.namespace }}"
    template: templates/jaeger/collector.j2
    state: present
  register: tools_jaeger_collector
  vars:
    container_image: |
      {{
        lookup('ansible.builtin.file', 'files/jaeger/collector.yaml') |
        from_yaml |
        community.general.json_query('spec.image')
      }}
    opensearch_urls:
      - http://opensearch-cluster-master.{{ helm_releases.opensearch.namespace }}.svc.cluster.local:9200
  when:
    - tools_required.jaeger

- name: Wait for Jaeger deployment to complete
  kubernetes.core.k8s_info:
    api_version: "{{ tools_jaeger_collector.result.apiVersion }}"
    kind: "{{ tools_jaeger_collector.result.kind }}"
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    name: "{{ tools_jaeger_collector.result.metadata.name }}"
    namespace: "{{ tools_jaeger_collector.result.metadata.namespace }}"
    wait: true
  register: tools_jaeger_collector_info
  until:
    - tools_jaeger_collector_info.resources[0].status.scale is defined
    - tools_jaeger_collector_info.resources[0].status.scale.statusReplicas | split('/') | unique | length == 1
  retries: 10
  delay: 30
  when:
    - tools_required.jaeger
    - tools_jaeger_collector is defined
