---
- name: Retrieve all kubelet-serving certificates
  kubernetes.core.k8s_info:
    api_version: certificates.k8s.io/v1
    kind: CertificateSigningRequest
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    field_selectors:
      - spec.signerName=kubernetes.io/kubelet-serving
    wait: true
  register: tools_csr_info
  when:
    - tools_cluster.provider == 'kind'

- name: Approve pending certificates
  ansible.builtin.command:
    cmd: kubectl certificate approve {{ item.metadata.name }}
  environment:
    KUBECONFIG: "{{ tools_cluster.kubeconfig | ansible.builtin.expanduser }}"
  register: cert_approve_output
  changed_when: cert_approve_output.rc == 0
  loop: "{{ tools_csr_info.resources }}"
  loop_control:
    label: "csr/{{ item.metadata.name }}"
  when:
    - tools_cluster.provider == 'kind'
    - item.status.conditions is not defined

- name: Wait for approvals to clear
  kubernetes.core.k8s_info:
    api_version: certificates.k8s.io/v1
    kind: CertificateSigningRequest
    kubeconfig: "{{ tools_cluster.kubeconfig }}"
    name: "{{ item.metadata.name }}"
    wait: true
    wait_condition:
      type: Approved
      status: "True"
  loop: "{{ tools_csr_info.resources }}"
  loop_control:
    label: "csr/{{ item.metadata.name }}"
  when:
    - tools_cluster.provider == 'kind'
    - item.status.conditions is not defined

- name: Import Prometheus installation tasks
  ansible.builtin.import_tasks:
    file: install_prometheus.yaml
  vars:
    helm_release: "{{ tools_helm_releases.prometheus }}"
  when:
    - tools_required.prometheus or tools_required.opencost

- name: Import Clickhouse installation tasks
  ansible.builtin.import_tasks:
    file: install_clickhouse.yaml
  vars:
    helm_release: "{{ tools_helm_releases.clickhouse_operator }}"
    instance: "{{ tools_instances.clickhouse }}"
  when:
    - tools_required.clickhouse or tools_required.opentelemetry

- name: Import OpenSearch installation tasks
  ansible.builtin.import_tasks:
    file: install_opensearch.yaml
  vars:
    helm_release: "{{ tools_helm_releases.opensearch }}"
  when:
    - tools_required.opensearch or tools_required.jaeger

- name: Import OpenTelemetry installation tasks
  ansible.builtin.import_tasks:
    file: install_opentelemetry.yaml
  vars:
    helm_releases:
      clickhouse: "{{ tools_helm_releases.clickhouse }}"
      collectors: "{{ tools_helm_releases.opentelemetry_collectors }}"
      operator: "{{ tools_helm_releases.opentelemetry_operator }}"
      opensearch: "{{ tools_helm_releases.opensearch }}"
    instances:
      jaeger: "{{ tools_instances.jaeger }}"
  when:
    - tools_required.opentelemetry or tools_required.jaeger

- name: Import OpenCost installation tasks
  ansible.builtin.import_tasks:
    file: install_opencost.yaml
  vars:
    helm_release: "{{ tools_helm_releases.opencost }}"
  when:
    - tools_required.opencost

- name: Import Ingress installation tasks
  ansible.builtin.import_tasks:
    file: install_ingress.yaml
  vars:
    helm_release: "{{ tools_helm_releases.ingress }}"
  when:
    - tools_required.ingress

- name: Import Chaos Mesh installation tasks
  ansible.builtin.import_tasks:
    file: install_chaos_mesh.yaml
  vars:
    helm_release: "{{ tools_helm_releases.chaos_mesh }}"
  when:
    - tools_required.chaos_mesh

- name: Import Kubernetes Metrics Server installation tasks
  ansible.builtin.import_tasks:
    file: install_kubernetes_metrics_server.yaml
  vars:
    helm_release: "{{ tools_helm_releases.kubernetes_metrics_server }}"
  when:
    - tools_required.kubernetes_metrics_server
    - tools_cluster.platform == "kubernetes"

- name: Import Kubernetes Topology Monitor installation tasks
  ansible.builtin.import_tasks:
    file: install_kubernetes_topology_monitor.yaml
  tags:
    - install_tools
  vars:
    helm_release: "{{ tools_helm_releases.kubernetes_topology_monitor }}"
  when:
    - tools_required.kubernetes_topology_monitor
