---
- name: Load kubeconfig file
  ansible.builtin.set_fact:
    agent_kubeconfig: "{{ lookup('ansible.builtin.file', agent_cluster.kubeconfig) | from_yaml }}"

- name: Find index of current context cluster
  ansible.builtin.set_fact:
    agent_cluster_index: "{{ lookup('ansible.utils.index_of', agent_kubeconfig.clusters, 'eq', cluster, 'name') }}"
  vars:
    cluster: "{{ agent_kubeconfig['current-context'] }}"

- name: Generate contexts and users
  ansible.builtin.set_fact:
    agent_contexts: "{{ (agent_contexts | default([])) + [{'cluster': cluster, 'user': 'agent', 'namespace': kv.key}] }}"
    agent_users: "{{ (agent_users | default([])) +[{'name': 'agent', 'user': {'token': kv.value}}] }}"
  loop: "{{ agent_application_tokens | dict2items }}"
  loop_control:
    label: application/{{ kv.key }}
    loop_var: kv
  vars:
    cluster: "{{ agent_kubeconfig['current-context'] }}"
  when:
    - kv.value != ""

- name: Create restricted kubeconfig file in temporary directory
  ansible.builtin.copy:
    content: "{{ lookup('ansible.builtin.template', 'templates/kubeconfig.j2') | from_yaml | to_nice_yaml(indent=2) }}"
    dest: /tmp/restricted_config
    mode: "0644"
  vars:
    certificate_authority_data: "{{ agent_kubeconfig.clusters[agent_cluster_index].cluster['certificate-authority-data'] }}"
    cluster: "{{ agent_kubeconfig.clusters[agent_cluster_index].name }}"
    contexts: "{{ agent_contexts }}"
    server: "{{ agent_kubeconfig.clusters[agent_cluster_index].cluster.server }}"
    users: "{{ agent_users }}"
