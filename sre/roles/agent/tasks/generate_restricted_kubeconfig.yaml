---
- name: Load kubeconfig file
  ansible.builtin.set_fact:
    agent_kubeconfig: "{{ lookup('ansible.builtin.file', agent_cluster.kubeconfig) | from_yaml }}"

- name: Find the cluster related to the current context
  ansible.builtin.set_fact:
    agent_current_cluster: "{{ agent_kubeconfig.clusters[index] }}"
  vars:
    index: |
      {{
        lookup(
          'ansible.utils.index_of',
          agent_kubeconfig.clusters,
          'eq',
          agent_kubeconfig['current-context'],
          'name'
        )
      }}

- name: Create TokenRequest
  ansible.builtin.command:
    argv:
      - kubectl
      - -n
      - agent
      - create
      - token
      - agent
      - --duration
      - 18h
      - -o
      - json
      - --kubeconfig={{ agent_cluster.kubeconfig | ansible.builtin.expanduser }}
  register: agent_token_creation_output
  changed_when: agent_token_creation_output.rc == 0

- name: Create restricted kubeconfig file in temporary directory
  ansible.builtin.copy:
    content: "{{ lookup('ansible.builtin.template', 'templates/kubeconfig.j2') | from_yaml | to_nice_yaml(indent=2) }}"
    dest: /tmp/restricted_config
    mode: "0644"
  vars:
    clusters:
      - cluster:
          server: "{{ agent_current_cluster.cluster['server'] }}"
          certificate-authority-data: "{{ agent_current_cluster.cluster['certificate-authority-data'] }}"
        name: "{{ agent_current_cluster.name }}"
    contexts:
      - context:
          cluster: "{{ agent_current_cluster.name }}"
          user: agent
        name: "{{ agent_current_cluster.name }}"
    users:
      - name: agent
        user:
          token: "{{ agent_token_creation_output.stdout | from_json | community.general.json_query('status.token') }}"

- name: Validate access to namespaces using restricted kubeconfig
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    kubeconfig: /tmp/restricted_config
    namespace: "{{ ns.name }}"
  loop: "{{ agent_existing_namespaces }}"
  loop_control:
    label: namespace/{{ ns.name }}
    loop_var: ns

- name: Validate restrictions using restricted kubeconfig
  ansible.builtin.command:
    cmd: kubectl -n default get pods --kubeconfig=/tmp/restricted_config
  changed_when: false
  failed_when: false
  register: agent_failed_restricted_command_output

- name: Assert that the validate restricted command failed
  ansible.builtin.assert:
    that: agent_failed_restricted_command_output.rc != 0
    fail_msg: Command succeeded. Access to the default namespace was not restricted.
    success_msg: Access to the default namespace was restricted.

- name: Copy restricted kubeconfig into local directory
  ansible.builtin.copy:
    dest: "{{ agent_storage.local.directory }}/kubeconfig"
    mode: "0644"
    src: /tmp/restricted_config
  when:
    - agent_storage.local is defined

- name: Upload restricted kubeconfig to S3 bucket
  amazon.aws.s3_object:
    endpoint_url: "{{ agent_storage.s3.endpoint }}"
    bucket: "{{ agent_storage.s3.bucket }}"
    object: "/{{ agent_storage.s3.directory }}/kubeconfig"
    src: /tmp/restricted_config
    mode: put
  when:
    - agent_storage.s3 is defined
