---
- name: Get current deployment
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: "{{ spec.workload.kind }}"
    name: "{{ spec.workload.name }}"
    namespace: "{{ spec.workload.namespace }}"
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
  register: faults_current_deployment

- name: Update port of first _ADDR variable to 0000
  ansible.builtin.set_fact:
    faults_updated_env_vars: "{{ (faults_updated_env_vars | default([])) + [updated_var] }}"
    faults_addr_updated: "{{ (faults_addr_updated | default(false)) or is_first_addr }}"
  vars:
    is_first_addr: >-
      {{
        not (faults_addr_updated | default(false)) and
        item.name is defined and
        item.name.endswith('_ADDR') and
        item.value is defined and
        ':' in item.value
      }}
    updated_var: >-
      {{
        {
          'name': item.name,
          'value': (
            item.value | regex_replace('(.*):(\d+)$', '\1:0000')
            if is_first_addr
            else item.value
          )
        } if item.value is defined
        else item
      }}
  loop: "{{ faults_current_deployment.resources[0].spec.template.spec.containers[0].env }}"

- name: Apply fault injection (first _ADDR variable)
  kubernetes.core.k8s:
    api_version: apps/v1
    kind: "{{ spec.workload.kind }}"
    name: "{{ spec.workload.name }}"
    namespace: "{{ spec.workload.namespace }}"
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    state: present
    definition:
      spec:
        template:
          spec:
            containers:
              - name: "{{ faults_current_deployment.resources[0].spec.template.spec.containers[0].name }}"
                env: "{{ faults_updated_env_vars }}"
    merge_type: strategic-merge
