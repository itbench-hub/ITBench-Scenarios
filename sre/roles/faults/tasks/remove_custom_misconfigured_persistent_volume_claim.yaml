---
- name: Retrieve managers from cluster
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: "{{ manager.kind }}"
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    name: "{{ manager.name }}"
    namespace: "{{ manager.namespace }}"
  register: managers_info
  loop: "{{ targets }}"
  loop_control:
    label: "{{ manager.kind }}/{{ manager.name }}"
    loop_var: manager

- name: Create volume list of indexes with invalid persisten volume claim
  ansible.builtin.set_fact:
    volumes: |
      {{
        (volumes | default([])) +
        [[resource_target[1], lookup('ansible.utils.index_of', resource_target[0].resources[0].spec.containers[0].volumes, 'eq', 'invalid-volume', 'name')]
      }}
  loop: "{{ managers_info.results | zip(targets) | list }}"
  loop_control:
    label: "{{ resource_target[1].name }}"
    loop_var: resource_target
  when:
    - resource_target[0].resources | length > 0

- name: Inject fault (misconfigured persistent volume claim)
  kubernetes.core.k8s_json_patch:
    api_version: apps/v1
    kind: "{{ resource_target[0].kind }}"
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    name: "{{ resource_target[0].name }}"
    namespace: "{{ resource_target[0].namespace }}"
    patch:
      - op: remove
        path: /spec/containers/0/volumes/{{ resource_target[1] }}
  loop: "{{ indexes }}"
  loop_control:
    label: "{{ resource_target[0].name }}"
    loop_var: resource_target

- name: Remove invalid Persistent Volume Claim
  kubernetes.core.k8s:
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: it-bench-invalid
        namespace: "{{ namespace }}"
    state: absent
  loop: "{{ targets | community.general.json_query('[*].namespace') | unique }}"
  loop_control:
    loop_var: namespace
