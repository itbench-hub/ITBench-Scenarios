---
- name: Retrieve managers from cluster
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: "{{ item.kind }}"
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    name: "{{ item.name }}"
    namespace: "{{ item.namespace }}"
  register: managers_info
  loop: "{{ targets }}"
  loop_control:
    label: "{{ item.kind }}/{{ item.name }}"

- name: Create volume list of indexes with invalid persisten volume claim
  ansible.builtin.set_fact:
    volumes: |
      {{
        (volumes | default([])) +
        [[item[1], lookup('ansible.utils.index_of', item[0].resources[0].spec.containers[0].volumes, 'eq', 'invalid-volume', 'name')]
      }}
  loop: "{{ managers_info.results | zip(targets) | list }}"
  loop_control:
    label: service/{{ item.[1]name }}
  when:
    - item[0].resources | length > 0

- name: Inject fault (misconfigured persistent volume claim)
  kubernetes.core.k8s_json_patch:
    api_version: apps/v1
    kind: "{{ item[0].kind }}"
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    name: "{{ item[0].name }}"
    namespace: "{{ item[0].namespace }}"
    patch:
      - op: remove
        path: /spec/containers/0/volumes/{{ item[1] }}
  loop: "{{ indexes }}"
  loop_control:
    label: service/{{ item[0].name }}

- name: Remove invalid Persistent Volume Claim
  kubernetes.core.k8s:
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: it-bench-invalid
        namespace: "{{ item }}"
    state: absent
  loop: "{{ targets | community.general.json_query('[*].namespace') | unique }}"
