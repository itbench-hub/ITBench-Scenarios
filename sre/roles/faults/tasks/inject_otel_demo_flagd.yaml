---
- name: Retrieve the ConfigMap for flagd deployment
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    namespace: "{{ helm_release.namespace }}"
    name: flagd-config
  register: faults_configmap_info

- name: Retrieve flagd json config from ConfigMap data
  ansible.builtin.set_fact:
    faults_flagd_config_json: "{{ faults_configmap_info.resources[0].data['demo.flagd.json'] | from_json }}"

- name: Generate partial config with enabled flags
  ansible.builtin.set_fact:
    faults_enabled_flags_config: |
      {{
        (faults_enabled_flags_config | default({})) |
        combine({ flag.name: { 'defaultVariant': flag.state } }, recursive=true)
      }}
  loop: "{{ spec.flags }}"
  loop_control:
    label: "{{ flag.name }}"
    loop_var: flag

- name: Replace the flagd config with the modified config (inject fault)
  kubernetes.core.k8s:
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: flagd-config
        namespace: "{{ helm_release.namespace }}"
      data:
        "demo.flagd.json": "{{ faults_flagd_config_json | combine({'flags': faults_enabled_flags_config}, recursive=true) | to_json }}"
    state: patched

- name: Restart all deployments to enable changes
  ansible.builtin.command:
    cmd: kubectl -n {{ helm_release.namespace }} rollout restart deployment
  environment:
    KUBECONFIG: "{{ faults_cluster.kubeconfig | ansible.builtin.expanduser }}"
  register: faults_rollout_restart_output
  changed_when: faults_rollout_restart_output.rc == 0
