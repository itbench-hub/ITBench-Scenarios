---
- name: Retrieve the alert recorder pod name
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    kubeconfig: "{{ recorders_cluster.kubeconfig }}"
    namespace: "{{ recorders_namespace.name }}"
    label_selectors:
      - app.kubernetes.io/name = prometheus-alert-recorder
      - app.kubernetes.io/part-of = it-bench
  register: recorders_pods_info

- name: Copy records directory from pod
  kubernetes.core.k8s_cp:
    kubeconfig: "{{ recorders_cluster.kubeconfig }}"
    local_path: /tmp/alerts
    namespace: "{{ recorders_pods_info.resources[0].metadata.namespace }}"
    pod: "{{ recorders_pods_info.resources[0].metadata.name }}"
    remote_path: /opt/app-root/src/records
    state: from_pod
  when:
    - recorders_pods_info is defined
    - recorders_pods_info.resources | length == 1

- name: Uninstall Prometheus Alert Recorder
  kubernetes.core.k8s:
    kubeconfig: "{{ recorders_cluster.kubeconfig }}"
    namespace: "{{ recorders_namespace.name }}"
    src: files/alerts/prometheus/statefulset.yaml
    state: absent
    wait: true

- name: Delete ConfigMap with Python script
  kubernetes.core.k8s:
    api_version: v1
    delete_all: true
    kind: ConfigMap
    kubeconfig: "{{ recorders_cluster.kubeconfig }}"
    namespace: "{{ recorders_namespace.name }}"
    label_selectors:
      - app.kubernetes.io/name = prometheus-alert-recorder
      - app.kubernetes.io/part-of = it-bench
    state: absent
    wait: true

- name: Delete Secret with bearer token
  kubernetes.core.k8s:
    api_version: v1
    delete_all: true
    kind: Secret
    kubeconfig: "{{ recorders_cluster.kubeconfig }}"
    namespace: "{{ recorders_namespace.name }}"
    label_selectors:
      - app.kubernetes.io/name = prometheus-alert-recorder
      - app.kubernetes.io/part-of = it-bench
    state: absent
    wait: true
  when:
    - recorders_cluster.platform == "openshift"

- name: Find all exported JSON files
  ansible.builtin.find:
    path: /tmp/alerts
    patterns:
      - "*.json"
  register: recorders_files

- name: Copy exported data into local directory
  ansible.builtin.copy:
    dest: "{{ recorders_storage.local.directory }}/{{ file.path | basename }}"
    mode: "0644"
    src: "{{ file.path }}"
  loop: "{{ recorders_files.files }}"
  loop_control:
    label: file/{{ file.path | basename }}
    loop_var: file
  when:
    - recorders_storage.local is defined

- name: Upload exported data to S3 bucket
  amazon.aws.s3_object:
    endpoint_url: "{{ recorders_storage.s3.endpoint }}"
    bucket: "{{ recorders_storage.s3.bucket }}"
    object: "/{{ recorders_storage.s3.directory }}/{{ file.path | basename }}"
    src: "{{ file.path }}"
    mode: put
  loop: "{{ recorders_files.files }}"
  loop_control:
    label: file/{{ file.path | basename }}
    loop_var: file
  when:
    - recorders_storage.s3 is defined
