---
# Note: This fault assumes that the worker nodes all have the same architecture.

- name: Retrieve worker nodes on the cluster
  kubernetes.core.k8s_info:
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    api_version: v1
    kind: Node
    label_selectors:
      - node-role.kubernetes.io/node =
  register: faults_nodes_info

- name: Extract the architectures of the worker nodes
  ansible.builtin.set_fact:
    faults_worker_node_architectures: "{{ faults_nodes_info | community.general.json_query('resources[*].status.nodeInfo.architecture') }}"

- name: Filter the image architecture options
  ansible.builtin.set_fact:
    faults_image_architecture: |
      {{
        ['amd64', 'arm64'] |
        difference(faults_worker_node_architectures | intersect(['amd64', 'arm64'])) |
        first
      }}

- name: Import variable setting tasks
  ansible.builtin.import_tasks:
    file: set_faults_workload_container_index.yaml
  vars:
    faults_workload: "{{ spec.workload }}"

- name: Inject fault (unsupported image)
  kubernetes.core.k8s_json_patch:
    api_version: apps/v1
    kind: "{{ spec.workload.kind }}"
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    name: "{{ spec.workload.name }}"
    namespace: "{{ spec.workload.namespace }}"
    patch:
      - op: replace
        path: /spec/template/spec/containers/{{ faults_workload_container_index }}/image
        value: quay.io/it-bench/hello-bench-{{ faults_image_architecture }}:1.0.0

- name: Import workload restart tasks
  ansible.builtin.import_tasks:
    file: force_workload_restart.yaml
  when:
    - (spec.workload.restart_policy | default('force')) == 'force'
  vars:
    faults_workload: "{{ spec.workload }}"
