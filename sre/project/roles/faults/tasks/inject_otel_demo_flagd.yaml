---
- name: Retrieve the ConfigMap for flagd deployment
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    namespace: "{{ helm_release.namespace }}"
    name: flagd-config
  register: faults_configmap_info

- name: Retrieve flagd json config from ConfigMap data
  ansible.builtin.set_fact:
    faults_flagd_config_json: "{{ faults_configmap_info.resources[0].data['demo.flagd.json'] | from_json }}"

- name: Generate partial config with enabled flags
  ansible.builtin.set_fact:
    faults_enabled_flags_config: |
      {{
        (faults_enabled_flags_config | default({})) |
        combine({ flag.name: { 'defaultVariant': flag.state } }, recursive=true)
      }}
  loop: "{{ spec.flags }}"
  loop_control:
    label: "{{ flag.name }}"
    loop_var: flag

- name: Replace the flagd config with the modified config (inject fault)
  kubernetes.core.k8s:
    kubeconfig: "{{ faults_cluster.kubeconfig }}"
    resource_definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: flagd-config
        namespace: "{{ helm_release.namespace }}"
      data:
        "demo.flagd.json": "{{ faults_flagd_config_json | combine({'flags': faults_enabled_flags_config}, recursive=true) | to_json }}"
    state: patched

- name: Create a dictionary of Flagd-based flags and their corresponding deployment mappings
  ansible.builtin.set_fact:
    flagd_failure_flag_deployment_mapping:
      "adFailure": "ad"
      "adHighCpu": "ad"
      "adManualGc": "ad"
      "cartFailure": "cart"
      "emailMemoryLeak": "email"
      "imageSlowLoad": "image-provider"
      "kafkaQueueProblems": "kafka"
      "loadGeneratorFloodHomepage": "load-generator"
      "paymentFailure": "payment"
      "paymentUnreachable": "payment"
      "productCatalogFailure": "product"
      "recommendationCacheFailure": "recommendation"

- name: Determine which deployments need to be restarted based on flags
  ansible.builtin.set_fact:
    deployments_to_restart: |
      {{
        spec.flags |
        map(attribute='name') |
        map('extract', flagd_failure_flag_deployment_mapping) |
        select('defined') |
        unique |
        list
      }}

- name: Restart only the deployments associated with the modified flags
  ansible.builtin.command:
    argv:
      - kubectl
      - -n
      - "{{ helm_release.namespace }}"
      - rollout
      - restart
      - deployment
      - "{{ item }}"
      - --kubeconfig={{ faults_cluster.kubeconfig | ansible.builtin.expanduser }}
  loop: "{{ deployments_to_restart }}"
  register: faults_rollout_restart_output
  changed_when: faults_rollout_restart_output.rc == 0
  when: deployments_to_restart | length > 0
