---
- name: Check if alerts in firing state are present
  hosts:
    - environment
  pre_tasks:
    - name: Import system role
      ansible.builtin.import_role:
        name: system
      tags:
        - always
      vars:
        system_cluster:
          kubeconfig: "{{ cluster.kubeconfig }}"

    - name: Import cluster role
      ansible.builtin.import_role:
        name: cluster
      tags:
        - always
      vars:
        cluster_files:
          kubeconfig: "{{ cluster.kubeconfig }}"
        cluster_tools_enabled:
          oc: "{{ system_oc_exists }}"
  tasks:
    - name: Import tools role for variable setting tasks
      ansible.builtin.import_role:
        name: tools
        tasks_from: set_ingress_hostname
      vars:
        tools_cluster:
          kubeconfig: "{{ cluster.kubeconfig }}"

    - name: Call the Prometheus Alerts API until specific alerts in firing state are detected
      ansible.builtin.uri:
        url: "http://{{ tools_ingress_hostname }}/prometheus/api/v1/alerts"
        method: GET
        return_content: true
        body_format: json
        headers:
          Content-Type: "application/json"
      register: alerts_api_result
      retries: 30
      delay: 15
      until: >
        alerts_api_result.status == 200 and
        alerts_api_result.json is defined and
        alerts_api_result.json.data is defined and
        alerts_api_result.json.data.alerts is defined and
        (alerts_api_result.json.data.alerts |
          selectattr('state', '==', 'firing') |
          selectattr('labels.alertname', 'in', [
            'FailedPodsDetected',
            'PendingPodsDetected',
            'RequestLatency',
            'RequestErrorRate',
            'KafkaConnectionClosureRate',
            'CPUSpend',
            'MemorySpend',
            'CPUEfficiency',
            'MemoryEfficiency'
          ]) |
          list | length > 0)

    - name: Display specific firing alerts found
      ansible.builtin.debug:
        msg: >
          Found {{ alerts_api_result.json.data.alerts |
                    selectattr('state', '==', 'firing') |
                    selectattr('labels.alertname', 'in', [
                      'FailedPodsDetected',
                      'PendingPodsDetected',
                      'RequestLatency',
                      'RequestErrorRate',
                      'KafkaConnectionClosureRate',
                      'CPUSpend',
                      'MemorySpend',
                      'CPUEfficiency',
                      'MemoryEfficiency'
                    ]) |
                    list }} specific alerts in firing state
      when: alerts_api_result is defined and alerts_api_result.json is defined

    - name: Save filtered firing alerts to file
      ansible.builtin.copy:
        content: >
          {{
            {
              "data": {
                "alerts": alerts_api_result.json.data.alerts |
                          selectattr('state', '==', 'firing') |
                          selectattr('labels.alertname', 'in', [
                            'FailedPodsDetected',
                            'PendingPodsDetected',
                            'RequestLatency',
                            'RequestErrorRate',
                            'KafkaConnectionClosureRate',
                            'CPUSpend',
                            'MemorySpend',
                            'CPUEfficiency',
                            'MemoryEfficiency'
                          ]) | list
              },
              "status": "success",
              "timestamp": ansible_date_time.iso8601
            } | to_nice_json
          }}
        dest: "/tmp/alerts_in_alerting_state_{{ ansible_date_time.iso8601_micro | replace(':', '') | replace('+00:00', '') }}.json"
        mode: "0644"
      register: alerts_file

    - name: Copy alerts file into local directory
      ansible.builtin.copy:
        src: "{{ alerts_file.dest }}"
        dest: "{{ storage.local.directory }}/{{ alerts_file.dest | basename }}"
        mode: "0644"
      when:
        - storage.local is defined
        - alerts_file is defined

    - name: Copy alerts file to S3 bucket
      amazon.aws.s3_object:
        endpoint_url: "{{ storage.s3.endpoint }}"
        bucket: "{{ storage.s3.bucket }}"
        object: "{{ storage.s3.directory }}/{{ alerts_file.dest | basename }}"
        src: "{{ alerts_file.dest }}"
        mode: put
      when:
        - storage.s3 is defined
        - alerts_file is defined

    - name: Clean up temporary file
      ansible.builtin.file:
        path: "{{ alerts_file.dest }}"
        state: absent
      when: alerts_file is defined
